{"version":3,"sources":["components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","App.js","index.js"],"names":["Feedback","this","props","options","map","option","type","onClick","andleVote","Component","Statistics","good","bad","neutral","total","countGoodPercentage","Notification","message","App","state","setState","prevState","constTotal","Math","ceil","FeedbackOptions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAYeA,G,6KATH,IAAD,OACP,OACE,8BACAC,KAAKC,MAAMC,QAAQC,KAAI,SAACC,GAAD,OAAY,wBAAQC,KAAK,SAASC,QAAS,kBAAM,EAAKL,MAAMM,UAAUH,IAA1D,SAAoEA,a,GAJtFI,cCcRC,E,uKAZX,OACE,qCACE,yCAAYT,KAAKC,MAAMS,KAAvB,OACA,wCAAWV,KAAKC,MAAMU,IAAtB,OACA,4CAAeX,KAAKC,MAAMW,QAA1B,OACA,0CAAaZ,KAAKC,MAAMY,MAAxB,OACA,mDAAsBb,KAAKC,MAAMa,oBAAjC,e,GARiBN,aCQVO,E,uKANb,OACE,6BAAKf,KAAKC,MAAMe,c,GAHOR,aC0CZS,G,kNApCbC,MAAQ,CACNR,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAEPJ,UAAY,SAACH,GACX,EAAKe,UAAS,SAACC,GAAD,sBAAmBhB,EAASgB,EAAUhB,GAAU,O,EAGhEiB,WAAa,WACX,OAAO,EAAKH,MAAMP,IAAM,EAAKO,MAAMR,KAAO,EAAKQ,MAAMN,S,EAGvDE,oBAAsB,WACpB,OAAOQ,KAAKC,KAAM,EAAKL,MAAMR,KAAO,EAAKW,aAAgB,M,uDAMzD,OACE,qCACE,cAACG,EAAD,CAAiBtB,QAJL,CAAC,OAAQ,UAAW,OAIGK,UAAWP,KAAKO,YACnD,cAAC,EAAD,CACEG,KAAMV,KAAKkB,MAAMR,KACjBE,QAASZ,KAAKkB,MAAMP,IACpBA,IAAKX,KAAKkB,MAAMN,QAChBC,MAAOb,KAAKqB,aACZP,oBAAqBd,KAAKc,wBAE5B,cAAC,EAAD,CAAcE,QAAQ,2B,GA/BZR,cCFlBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4fd347a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Feedback extends Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n     {this.props.options.map((option) => <button type=\"button\" onClick={() => this.props.andleVote(option)}>{option}</button>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Feedback;","import React, { Component } from \"react\";\r\n\r\nclass Statistics extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1> Good: {this.props.good} </h1>\r\n        <h1> Bad: {this.props.bad} </h1>\r\n        <h1> Neutral: {this.props.neutral} </h1>\r\n        <h1> Total: {this.props.total} </h1>\r\n        <h1>Good percentage: {this.props.countGoodPercentage} %</h1>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Statistics;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Notification extends Component {\r\nrender() {\r\n  return(\r\n    <h1>{this.props.message}</h1>\r\n  )\r\n}\r\n}\r\n\r\nexport default Notification;","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\nimport Section from \"./components/Section\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  andleVote = (option) => {\n    this.setState((prevState) => ({ [option]: prevState[option] + 1 }));\n  };\n\n  constTotal = () => {\n    return this.state.bad + this.state.good + this.state.neutral;\n  };\n\n  countGoodPercentage = () => {\n    return Math.ceil((this.state.good / this.constTotal()) * 100)\n  }\n\n  render() {\n    const options = [\"good\", \"neutral\", \"bad\"];\n\n    return (\n      <>\n        <FeedbackOptions options={options} andleVote={this.andleVote}/>\n        <Statistics\n          good={this.state.good}\n          neutral={this.state.bad}\n          bad={this.state.neutral}\n          total={this.constTotal()}\n          countGoodPercentage={this.countGoodPercentage()}\n        />\n        <Notification message=\"No feedback yet\" />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}